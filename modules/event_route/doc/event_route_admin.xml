<!-- Module User's Guide -->

<chapter>
	
	<title>&adminguide;</title>
	
	<section id="overview" xreflabel="Overview">
	<title>Overview</title>
	<para>
		This module provides a simple way for handling different events,
		triggered through the &osips; Event Interface, directly from the &osips;
		script. For a specific event, a special route
		(<emphasis>event_route</emphasis>) has to be declared in the script, and
		should contain the code that handles the event. The route is executed by
		the module when the corresponding event is raised by the &osips; Event
		Interface.Since version 1.12, the way an event is handlend (sync/async)
		should be specified from the configuration script with the desired keyword
		following the name of the event (<emphasis>event_route[e, sync]</emphasis>).
	</para>
	</section>

	<section id="event-route-parameters">
	<title>ROUTE events parameters</title>
	<para>
		<para>
		In order to retrieve the parameters of an event, the
		<emphasis>$param(name)</emphasis> variable has to be used. It's
			name can be the parameter's name, or, if an integer is specified, its
			index inside the parameter's list.
		</para>

		Example:
		<programlisting format="linespecific">
xlog("first parameters is $param(1)\n");
xlog("Pike Blocking IP is $param(ip)\n");
</programlisting>

		<emphasis>NOTE:</emphasis> An event may be triggered within a different event, leading
		to nested processing. This function will retrieve the parameters of the currently processed
		event.
	</para>
	<para>The event name can contain any non-quoted string character, but
		it is recommended to follow the syntax:
		E_<emphasis>MODULE_NAME</emphasis>_<emphasis>EXTRA_NAME</emphasis>
	</para>
	</section>

	<section>
		<title>EVENT_ROUTE usage</title>
		<para>
			In order to handle the <emphasis>E_PIKE_BLOCKED</emphasis> event,
			the following snippet can be used:

			<para>
				<example>
					<title>EVENT_ROUTE usage</title>
					<programlisting format="linespecific">
	event_route[E_PIKE_BLOCKED] {
		xlog("IP $param(ip) has been blocked\n");
	}
					</programlisting>
				</example>
			</para>
		</para>
	</section>
	
	<section>
	<title>EVENT_ROUTE socket syntax</title>
	<para>
		As the &osips; Event Interface requires, the <emphasis>event_route</emphasis>
		module uses a specific socket syntax:
		<para><emphasis>'route:' event_name</emphasis></para>
	</para>
	<para>
		Example:
		<para>
			<emphasis>route:E_PIKE_BLOCKED</emphasis>
		</para>
	</para>
	</section>

	<section id="dependencies" xreflabel="Dependencies">
	<title>Dependencies</title>
	<section>
		<title>&osips; Modules</title>
		<para>
		The following modules must be loaded before this module:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>No dependencies on other &osips; modules</emphasis>.
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>
	<section>
		<title>External Libraries or Applications</title>
		<para>
		The following libraries or applications must be installed before 
		running &osips; with this module loaded:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>none</emphasis>
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>
	</section>

	<section id="exported_parameters" xreflabel="Exported Parameters">
	<title>Exported Parameters</title>
	<para>The module does not export parameters to be used in configuration script.</para>
	</section>

	<section id="exported_functions" xreflabel="exported_functions">
	<title>Exported Functions</title>
	<para>The function does not export any function.</para>
	</section>

</chapter>

