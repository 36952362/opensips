<!-- Module User's Guide -->

<chapter>

	<title>&adminguide;</title>

	<section id="overview" xreflabel="Overview">
	<title>Overview</title>
	<para>Various checks related to &sip; &uri;.</para>
	<para>This module implements some URI related AAA based tests.</para>
	</section>
	<section id="dependencies" xreflabel="Dependencies">
	<title>Dependencies</title>
	<section>
		<title>&osips; Modules</title>
		<para>
		At least one of the following modules must be loaded before this module:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>an aaa protocol module </emphasis>.
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>
	<section>
		<title>External Libraries or Applications</title>
		<para>
		The following libraries or applications must be installed before running
		&osips; with this module loaded:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>None</emphasis>.
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>
	</section>

	<section id="exported_parameters" xreflabel="Exported Parameters">
	<title>Exported Parameters</title>
	<section id="param_aaa_url" xreflabel="aaa_url">
		<title><varname>aaa_url</varname> (string)</title>
		<para>
		This is the url representing the AAA protocol used and the location of the configuration file of this protocol.
		</para>
		<example>
		<title>Set <varname>aaa_url</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("uri", "aaa_url", "radius:/etc/radiusclient-ng/radiusclient.conf")
...
</programlisting>
		</example>
	</section>
	<section id="param_service_type" xreflabel="service_type">
		<title><varname>service_type</varname> (integer)</title>
		<para>
		AAA service type used in
	<function>aaa_does_uri_exist</function> and <function>aaa_does_uri_user_exist</function> checks.
		</para>
		<para>
		<emphasis>
			Default value is 10 (Call-Check).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>service_type</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("uri", "service_type", 11)
...
</programlisting>
		</example>
	</section>

	<section id="param_use_sip_uri_host" xreflabel="use_sip_uri_host">
		<title><varname>use_sip_uri_host</varname> (integer)</title>
		<para>
		If zero, <function>aaa_does_uri_exist</function>
	sends to AAA server Request URI user@host in UserName
	attribute.  If non-zero, <function>aaa_does_uri_exist</function>
	sends to AAA server Request URI user in UserName attribute
	and host in SIP-URI-Host attribute.
		</para>
		<para>
		<emphasis>
			Default value is 0.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>use_sip_uri_host</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("uri", "use_sip_uri_host", 1)
...
</programlisting>
		</example>
	</section>

	</section>
	<section id="exported_functions" xreflabel="exported_functions">
	<title>Exported Functions</title>

		<section id="func_aaa_does_uri_exist" xreflabel="aaa_does_uri_exist()">
		<title>
		<function moreinfo="none">aaa_does_uri_exist([pvar])</function>
		</title>
		<para>
		Checks from Radius if user@host in Request-&uri; or in
		URI stored in pseudo variable argument belongs
		to a local user. Can be used to decide if 404 or 480 should
		be returned after lookup has failed.   If yes, loads AVP
		based on SIP-AVP reply items returned from Radius.  Each
		SIP-AVP reply item must have a string value of form:
		</para>
		<para>
		<itemizedlist>
			<listitem><para><emphasis>
			value = SIP_AVP_NAME SIP_AVP_VALUE
			</emphasis></para></listitem>
			<listitem><para><emphasis>
			SIP_AVP_NAME = STRING_NAME | '#'ID_NUMBER
			</emphasis></para></listitem>
			<listitem><para><emphasis>
			SIP_AVP_VALUE = ':'STRING_VALUE | '#'NUMBER_VALUE
			</emphasis></para></listitem>
		</itemizedlist>
		</para>
		<para>
		Returns 1 if Radius returns Access-Accept, -1 if Radius
		returns Access-Reject, and -2 in case of internal
		error.
		</para>
		<para>
		This function can be used from REQUEST_ROUTE.
		</para>
		<example>
		<title><function>aaa_does_uri_exist</function> usage</title>
		<programlisting format="linespecific">
...
if (aaa_does_uri_exist()) {
	...
};
...
</programlisting>
		</example>
	</section>
	<section id="func_aaa_does_uri_user_exist" xreflabel="aaa_does_uri_user_exist()">
		<title>
		<function moreinfo="none">aaa_does_uri_user_exist([pvar])</function>
		</title>
		<para>
		Similar to aaa_does_uri_exist, but check is done
		based only on Request-URI user part or user stored in
		pseudo variable argument.  User should thus
		be unique among all users, such as an E.164 number.
		</para>
		<para>
		This function can be used from REQUEST_ROUTE.
		</para>
		<example>
		<title><function>aaa_does_uri_user_exist</function> usage</title>
		<programlisting format="linespecific">
...
if (aaa_does_uri_user_exist()) {
	...
};
...
</programlisting>
		</example>
	</section>

	</section>
</chapter>

